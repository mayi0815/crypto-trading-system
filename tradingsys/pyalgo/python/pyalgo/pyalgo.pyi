from enum import Enum
from typing import Optional, List, Dict
from datetime import datetime

class Handle: ...

def init_logger(path: Optional[str]) -> Handle: ...
def info(filename: str, lineno: int, msg: str): ...
def debug(filename: str, lineno: int, msg: str): ...
def warn(filename: str, lineno: int, msg: str): ...
def error(filename: str, lineno: int, msg: str): ...

class Kline:
    """"""

    @property
    def time(self) -> int: ...
    @property
    def datetime(self) -> datetime: ...
    @property
    def symbol(self) -> str: ...
    @property
    def stream(self) -> str: ...
    @property
    def open(self) -> float: ...
    @property
    def high(self) -> float: ...
    @property
    def low(self) -> float: ...
    @property
    def close(self) -> float: ...
    @property
    def volume(self) -> float: ...
    @property
    def amount(self) -> float: ...

class Depth:
    """"""

    @property
    def time(self) -> int: ...
    @property
    def datetime(self) -> datetime: ...
    @property
    def symbol(self) -> str: ...
    @property
    def stream(self) -> str: ...
    @property
    def bid_level(self) -> int: ...
    @property
    def ask_level(self) -> int: ...
    def bid_prc(self, level: int) -> float: ...
    def ask_prc(self, level: int) -> float: ...
    def bid_vol(self, level: int) -> float: ...
    def ask_vol(self, level: int) -> float: ...

class Phase(Enum):
    AUCTION = 0
    PRE_OPEN = 1
    OPEN = 2
    PRE_CLOSE = 3
    CLOSE = 4
    UNDEF = 5

class Side(Enum):
    BUY = 0
    SELL = 1
    UNDEF = 2

class OrderType(Enum):
    LIMIT = 0
    LIMIT_MAKER = 1
    MARKET = 2
    STOP = 3
    STOP_MARKET = 4
    STOP_LOSS = 5
    STOP_LOSS_LIMIT = 6
    TAKE_PROFIT = 7
    TAKE_PROFIT_LIMIT = 8
    TAKE_PROFIT_MARKET = 9
    TRAILING_STOP_MARKET = 10
    UNDEF = 11

class Tif(Enum):
    GTC = 0
    IOC = 1
    FOK = 2
    GTX = 3
    GTD = 4
    UNDEF = 5

class State(Enum):
    NEW = 0
    PARTIALLY_FILLED = 1
    FILLED = 2
    CANCELED = 3
    REJECTED = 4
    EXPIRED = 5
    EXPIRED_IN_MATCH = 6
    UNDEF = 7

class Order:
    """"""

    @property
    def time(self) -> int: ...
    @property
    def datetime(self) -> datetime: ...
    @property
    def symbol(self) -> str: ...
    @property
    def side(self) -> Side: ...
    @property
    def state(self) -> State: ...
    @property
    def order_type(self) -> OrderType: ...
    @property
    def tif(self) -> Tif: ...
    @property
    def quantity(self) -> float: ...
    @property
    def price(self) -> float: ...
    @property
    def id(self) -> int: ...
    @property
    def trade_time(self) -> int: ...
    @property
    def trade_dt(self) -> datetime: ...
    @property
    def trade_price(self) -> float: ...
    @property
    def trade_quantity(self) -> float: ...
    @property
    def acc(self) -> float: ...
    @property
    def making(self) -> bool: ...
    @property
    def order_time(self) -> int: ...
    @property
    def order_dt(self) -> datetime: ...
    @property
    def is_active(self) -> bool: ...

class EventType(Enum):
    Depth = 0
    Kline = 1
    Order = 2
    Position = 3

class Event:
    """"""

    @property
    def event_type(self) -> EventType: ...
    @property
    def data(self): ...

class PremiumIndex:
    """"""

    @property
    def time(self) -> int: ...
    @property
    def datetime(self) -> datetime: ...
    @property
    def symbol(self) -> str: ...
    @property
    def mark_price(self) -> float: ...
    @property
    def index_price(self) -> float: ...
    @property
    def estimated_settle_price(self) -> float: ...
    @property
    def last_funding_rate(self) -> float: ...
    @property
    def next_funding_time(self) -> int: ...
    @property
    def next_funding_dt(self) -> datetime: ...
    @property
    def interest_rate(self) -> float: ...

class Rest:
    """"""

    def __init__(self, base_uri: str, apikey: str, private_key: str) -> Rest: ...
    def get(self, path: str, params: Dict[str, str], authenticate: bool) -> str: ...
    def post(self, path: str, params: Dict[str, str], authenticate: bool) -> str: ...
    def put(self, path: str, params: Dict[str, str], authenticate: bool) -> str: ...
    def delete(self, path: str, params: Dict[str, str], authenticate: bool) -> str: ...
    def patch(self, path: str, params: Dict[str, str], authenticate: bool) -> str: ...
    def sign(self, data: str) -> str: ...
    def get_premium_index(self) -> List[PremiumIndex]: ...

class TradingPhase:
    """"""

    def __init__(self) -> TradingPhase: ...
    def keys(self) -> List[int]: ...
    def vals(self) -> List[Phase]: ...
    def add_phase(self, hour: int, minute: int, second: int, phase: Phase): ...
    def to_second(self, mills: int) -> int: ...
    def determine(self, mills: int) -> Phase: ...
    def to_datetime(self, mills: int) -> datetime: ...

class Session:
    """"""

    def __init__(
        self, addr: str, session_id: int, name: str, trading: bool
    ) -> Session: ...
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def trading(self) -> bool: ...
    @property
    def is_login(self) -> bool: ...
    def connect(self): ...
    def subscribe(self, symbol: str): ...
    def process(self) -> Optional[Event]: ...
    def add_order(
        self,
        symbol: str,
        price: float,
        quantity: float,
        side: Side,
        order_type: OrderType,
        tif: Tif,
    ) -> Optional[Order]: ...
    def cancel(self, symbol: str, order_id: int): ...

class Subscription:
    """"""

    @property
    def symbol(self) -> str: ...
    @property
    def delivery(self) -> datetime: ...
    @property
    def onboard(self) -> datetime: ...
    @property
    def max_prc(self) -> float: ...
    @property
    def min_prc(self) -> float: ...
    @property
    def tick_size(self) -> float: ...
    @property
    def lot(self) -> float: ...
    @property
    def min_notional(self) -> float: ...
    @property
    def net(self) -> float: ...
    def order_support(self, order_type: OrderType) -> bool: ...
    def tif_support(self, tif: Tif) -> bool: ...
    def floor_to_lot_size(self, vol: float) -> float: ...
    def round_price(self, price: float) -> float: ...
    def tick_up(self, price: float, n: int) -> float: ...
    def tick_dn(self, price: float, n: int) -> float: ...
    def add_phase(self, hour: int, minute: int, second: int, phase: Phase): ...
    def determine(self, mills: int) -> Phase: ...
